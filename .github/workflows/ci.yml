name: HerRaise CI/CD Pipeline with DevSecOps

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  AZURE_WEBAPP_NAME_STAGING: herraise-app-staging
  AZURE_WEBAPP_NAME_PROD: herraisehub
  ACR_NAME: herraise
  IMAGE_NAME: herraise-app

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run build process
        run: |
          echo "Starting build process..."
          npm run build:production
          echo "Build completed successfully"

      - name: Validate build output
        run: |
          echo "Validating build output..."
          ls -la dist/ || echo "Dist directory contents:"
          test -d dist/backend || (echo "Backend files missing" && exit 1)
          test -d dist/frontend || (echo "Frontend files missing" && exit 1)
          test -f dist/package.json || (echo "Package.json missing" && exit 1)
          echo "Build validation passed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Run linting
        run: npm run lint

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Dependency vulnerability scanning
        run: |
          echo "Starting dependency vulnerability scanning..."
          mkdir -p security-reports
          npm audit --audit-level=critical --json > security-reports/critical-vulnerabilities.json 2>/dev/null || true
          echo "Security audit completed"

      - name: SAST (Static Application Security Testing)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          exit-code: '0'
          format: 'table'

      - name: Upload Security Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: security-reports/
          retention-days: 30

  docker:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: [build, test, security]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: |
          az acr login --name ${{ env.ACR_NAME }}
          echo "Successfully logged into ACR"

      - name: Build Docker image
        run: |
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          echo "Docker image built successfully"

      - name: Container Security Scanning
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'table'
          exit-code: '0'

      - name: Push Docker image
        run: |
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          echo "Image pushed successfully"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Staging
        run: |
          az webapp config container set \
            --name ${{ env.AZURE_WEBAPP_NAME_STAGING }} \
            --resource-group HerRaise_RG \
            --docker-custom-image-name ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --docker-registry-server-url https://${{ env.ACR_NAME }}.azurecr.io
          az webapp restart --name ${{ env.AZURE_WEBAPP_NAME_STAGING }} --resource-group HerRaise_RG
          echo "Staging deployment completed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: https://${{ env.AZURE_WEBAPP_NAME_PROD }}.azurewebsites.net
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Production
        run: |
          az webapp config container set \
            --name ${{ env.AZURE_WEBAPP_NAME_PROD }} \
            --resource-group HerRaise_RG \
            --docker-custom-image-name ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --docker-registry-server-url https://${{ env.ACR_NAME }}.azurecr.io
          az webapp restart --name ${{ env.AZURE_WEBAPP_NAME_PROD }} --resource-group HerRaise_RG
          echo "Production deployment completed"

      - name: Update CHANGELOG
        run: |
          echo "## [$(date +%Y.%m.%d)] - $(date +%Y-%m-%d)" > TEMP_CHANGELOG
          echo "" >> TEMP_CHANGELOG
          echo "### Deployed" >> TEMP_CHANGELOG
          echo "- Production deployment of commit ${GITHUB_SHA:0:7}" >> TEMP_CHANGELOG
          echo "" >> TEMP_CHANGELOG
          cat CHANGELOG.md >> TEMP_CHANGELOG
          mv TEMP_CHANGELOG CHANGELOG.md

      - name: Commit CHANGELOG
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "chore: update CHANGELOG for deployment ${GITHUB_SHA:0:7}" || exit 0
          git push || exit 0

  monitoring:
    name: Setup Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure Application Insights
        run: |
          az monitor app-insights component create \
            --app herraise-insights \
            --location eastus \
            --resource-group HerRaise_RG \
            --application-type web || echo "Already exists"
          echo "Monitoring configured"