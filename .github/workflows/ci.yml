name: HerRaise Static Site CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  AZURE_WEBAPP_NAME_PROD: herraisehub
  AZURE_WEBAPP_NAME_STAGING: herraise-app-staging
  ACR_NAME: herraise
  IMAGE_NAME: herraise-static
jobs:
  build-test:
    name: Build and Test Static Site
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # Build process: check for HTML file
      - name: Check HTML file exists
        run: test -f frontend/index.html
      # Testing procedures: linting and tests (optional)
      - name: Run HTML/CSS lint (optional)
        run: echo "Linting step can be added here"
      - name: Run automated tests (optional)
        run: echo "Testing step can be added here"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # Security scanning results: Trivy scan
      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './frontend'
          format: 'table'
          output: 'security-report.txt'
          exit-code: '0'
      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.txt

  docker:
    name: Build and Push Static Site Image
    runs-on: ubuntu-latest
    needs: [build-test, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - name: Build Docker image
        run: |
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} -f Dockerfile .
      - name: Push Docker image
        run: |
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker
    # FIXED: Deploy to staging on push to develop OR pull request targeting develop
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/develop') ||
      (github.event_name == 'pull_request' && github.base_ref == 'develop')
    environment: staging
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Deploy to Azure Web App (Container)
        run: |
          az webapp config container set \
            --name ${{ env.AZURE_WEBAPP_NAME_STAGING }} \
            --resource-group HerRaise_RG \
            --docker-custom-image-name ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --docker-registry-server-url https://${{ env.ACR_NAME }}.azurecr.io
          az webapp restart --name ${{ env.AZURE_WEBAPP_NAME_STAGING }} --resource-group HerRaise_RG
          echo "Staging deployment completed"
      - name: Post-Deployment Health Check
        run: |
          set +e
          echo "Waiting for deployment to stabilize..."
          sleep 45
          # Health check with retries and debug output
          for i in {1..8}; do
            echo "Health check attempt $i/8"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_WEBAPP_NAME_STAGING }}.azurewebsites.net/)
            echo "HTTP status: $STATUS"
            if [ "$STATUS" -ge 200 ] && [ "$STATUS" -lt 400 ]; then
              echo "Staging health check passed"
              exit 0
            fi
            echo "Attempt $i failed, waiting 20 seconds..."
            sleep 20
          done
          echo "WARNING: Health check failed after 8 attempts, but continuing deployment for staging."
          exit 0
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker
    # FIXED: Deploy to production on push to main OR pull request targeting main
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'pull_request' && github.base_ref == 'main')
    environment:
      name: production
      url: https://${{ env.AZURE_WEBAPP_NAME_PROD }}.azurewebsites.net
      # Manual approval required before production deployment
      # In GitHub, set up environment protection rules for 'production' to require approval
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Deploy to Azure Web App (Container)
        run: |
          az webapp config container set \
            --name ${{ env.AZURE_WEBAPP_NAME_PROD }} \
            --resource-group HerRaise_RG \
            --docker-custom-image-name ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --docker-registry-server-url https://${{ env.ACR_NAME }}.azurecr.io
          az webapp restart --name ${{ env.AZURE_WEBAPP_NAME_PROD }} --resource-group HerRaise_RG
          echo "Production deployment completed"
      - name: Post-Deployment Health Check
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 30
          
          # Health check with retries
          for i in {1..5}; do
            echo "Health check attempt $i/5"
            if curl -f -s -L --max-time 30 https://${{ env.AZURE_WEBAPP_NAME_PROD }}.azurewebsites.net/ > /dev/null; then
              echo "Production health check passed"
              exit 0
            fi
            echo "Attempt $i failed, waiting 15 seconds..."
            sleep 15
          done
          echo "Health check failed after 5 attempts"
          exit 1
      - name: Monitoring & Alarms Documentation
        run: |
          echo "Monitoring is configured via Azure Application Insights and Azure Monitor."
          echo "Alarms are set for response time, availability, and security events."
          echo "Dashboard URL: https://portal.azure.com/#@herraise-insights/overview"
          echo "Alerts are sent to configured email/webhook action groups."
