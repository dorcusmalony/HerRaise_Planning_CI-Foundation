name: HerRaise CI/CD Pipeline with DevSecOps

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  AZURE_WEBAPP_NAME_STAGING: herraise-app-staging
  AZURE_WEBAPP_NAME_PROD: herraisehub
  ACR_NAME: herraise
  IMAGE_NAME: herraise-app

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run build process
        run: |
          echo "🔨 Starting build process..."
          npm run build:production
          echo "✅ Build completed successfully"
      - name: Validate build output
        run: |
          echo "🔍 Validating build output..."
          test -d dist/backend || (echo "❌ Backend files missing" && exit 1)
          test -d dist/frontend || (echo "❌ Frontend files missing" && exit 1)
          test -f dist/package.json || (echo "❌ Package.json missing" && exit 1)
          echo "✅ Build validation passed"
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: |
          echo "🧪 Running test suite..."
          npm test
          echo "✅ Tests completed"
      - name: Run linting
        run: |
          echo "🔍 Running code quality checks..."
          npm run lint
          echo "✅ Linting completed"
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Dependency vulnerability scanning
        run: |
          echo "🔍 Starting dependency vulnerability scanning..."
          mkdir -p security-reports
          
          # Run comprehensive security audit
          npm audit --audit-level=critical --json > security-reports/critical-vulnerabilities.json 2>/dev/null || true
          npm audit --audit-level=high --json > security-reports/high-vulnerabilities.json 2>/dev/null || true
          npm audit --json > security-reports/full-audit.json 2>/dev/null || true
          
          # Generate summary report
          echo "📊 Security Scan Summary:" > security-reports/summary.txt
          echo "Scan Date: $(date)" >> security-reports/summary.txt
          echo "Project: HerRaise Platform" >> security-reports/summary.txt
          echo "" >> security-reports/summary.txt
          
          if npm audit --audit-level=critical --quiet 2>/dev/null; then
            echo "✅ No critical vulnerabilities found" >> security-reports/summary.txt
          else
            echo "⚠️ Critical vulnerabilities detected" >> security-reports/summary.txt
          fi
          
          echo "✅ Dependency scanning completed"
      - name: Automated Vulnerability Remediation
        run: |
          echo "🔧 Attempting automated vulnerability fixes..."
          npm audit fix --force 2>/dev/null || echo "Some vulnerabilities require manual intervention"
          echo "✅ Auto-remediation completed"
      - name: SAST (Static Application Security Testing)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          exit-code: '0'
          format: 'table'

      - name: Upload Security Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: security-reports/
          retention-days: 30

  docker:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: [build, test, security]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: |
          echo "🔐 Logging into Azure Container Registry..."
          az acr login --name ${{ env.ACR_NAME }}
          echo "✅ Successfully logged into ACR"
      - name: Build Docker image
        run: |
          echo "🐳 Building Docker image..."
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          echo "✅ Docker image built successfully"
      - name: Container Security Scanning
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'table'
          exit-code: '0'

      - name: Push Docker image
        run: |
          echo "📤 Pushing image to registry..."
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          echo "✅ Image pushed successfully"
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Staging
        run: |
          echo "🚀 Deploying to staging environment..."
          az webapp config container set \
            --name ${{ env.AZURE_WEBAPP_NAME_STAGING }} \
            --resource-group HerRaise_RG \
            --docker-custom-image-name ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --docker-registry-server-url https://${{ env.ACR_NAME }}.azurecr.io
          az webapp restart --name ${{ env.AZURE_WEBAPP_NAME_STAGING }} --resource-group HerRaise_RG
          echo "✅ Staging deployment completed"
          echo "🌐 Staging URL: https://${{ env.AZURE_WEBAPP_NAME_STAGING }}.azurewebsites.net"
  deploy-production:
    name: Deploy to Production (Manual Approval Required)
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: https://${{ env.AZURE_WEBAPP_NAME_PROD }}.azurewebsites.net
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Production
        run: |
          echo "🚀 Deploying to production environment..."
          az webapp config container set \
            --name ${{ env.AZURE_WEBAPP_NAME_PROD }} \
            --resource-group HerRaise_RG \
            --docker-custom-image-name ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --docker-registry-server-url https://${{ env.ACR_NAME }}.azurecr.io
          az webapp restart --name ${{ env.AZURE_WEBAPP_NAME_PROD }} --resource-group HerRaise_RG
          echo "✅ Production deployment completed"
          echo " Production URL: https://${{ env.AZURE_WEBAPP_NAME_PROD }}.azurewebsites.net"
      - name: Update CHANGELOG
        run: |
          echo " Updating CHANGELOG..."
          echo "## [$(date +%Y.%m.%d)] - $(date +%Y-%m-%d)" > TEMP_CHANGELOG
          echo "" >> TEMP_CHANGELOG
          echo "### Deployed" >> TEMP_CHANGELOG
          echo "- Production deployment of commit ${GITHUB_SHA:0:7}" >> TEMP_CHANGELOG
          echo "- Pipeline run: ${GITHUB_RUN_NUMBER}" >> TEMP_CHANGELOG
          echo "" >> TEMP_CHANGELOG
          cat CHANGELOG.md >> TEMP_CHANGELOG
          mv TEMP_CHANGELOG CHANGELOG.md
      - name: Commit CHANGELOG
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "chore: update CHANGELOG for deployment ${GITHUB_SHA:0:7}" || exit 0
          git push || exit 0
      - name: Production Deployment Validation
        run: |
          echo "Validating production deployment..."
          # Wait for deployment to stabilize
          sleep 45
          # Production health check
          if curl -f -s https://herraisehub.azurewebsites.net/api/health > /dev/null; then
            echo "Production deployment successful and healthy"
            echo "Live production URL: https://herraisehub.azurewebsites.net"
          else
            echo "Production health check failed"
            exit 1
          fi
          # Log deployment success
          echo "Deployment Metrics:"
          echo "- Commit: ${GITHUB_SHA}"
          echo "- Deployed at: $(date)"
          echo "- Pipeline: ${GITHUB_RUN_NUMBER}"
  monitoring:
    name: Setup Monitoring & Alerts
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure Application Insights
        run: |
          echo "📊 Setting up Application Insights monitoring..."
          az monitor app-insights component create \
            --app herraise-insights \
            --location eastus \
            --resource-group HerRaise_RG \
            --application-type web || echo "Already exists"
          
          INSTRUMENTATION_KEY=$(az monitor app-insights component show \
            --app herraise-insights \
            --resource-group HerRaise_RG \
            --query instrumentationKey -o tsv)
          
          az webapp config appsettings set \
            --name ${{ env.AZURE_WEBAPP_NAME_PROD }} \
            --resource-group HerRaise_RG \
            --settings APPINSIGHTS_INSTRUMENTATIONKEY="$INSTRUMENTATION_KEY" \
                      NODE_ENV=production \
                      LOG_LEVEL=info
          
          echo "✅ Application Insights configured"
      - name: Create Operational Alarm
        run: |
          echo " Setting up operational alarms..."
          az monitor metrics alert create \
            --name "HerRaise-HighResponseTime" \
            --resource-group HerRaise_RG \
            --scopes "/subscriptions/$(az account show --query id -o tsv)/resourceGroups/HerRaise_RG/providers/Microsoft.Web/sites/${{ env.AZURE_WEBAPP_NAME_PROD }}" \
            --condition "avg ResponseTime > 5" \
            --description "Alert when average response time exceeds 5 seconds" \
            --evaluation-frequency 1m \
            --window-size 5m \
            --severity 2 || echo "Alert already exists"
          echo " Operational alarms configured"